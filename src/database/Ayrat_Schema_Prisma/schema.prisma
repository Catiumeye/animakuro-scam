// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id          String      @id @default(uuid()) @db.Uuid
    username    String
    email       String      @unique
    pass_hash   String      @map("password_hash")
    birthday    DateTime
    gender      Gender      @default(MALE)
    created_at  DateTime    @default(now()) @db.Date

    @@map("user")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Friendship {
    friend_one  String              @db.Uuid
    friend_two  String              @db.Uuid
    status      FriendshipStatus    @default(AWAITING)
    start_date  DateTime            @default(now()) @db.Date

    @@unique([friend_one, friend_two])
    @@map("friendship")
}

enum FriendshipStatus {
    AWAITING
    REQUESTED
    CONFIRMED
}

model Anime {
    id                      String          @id @default(uuid()) @db.Uuid
    name                    String          @db.VarChar(100)
    score                   Float           @db.Real
    year                    Int             @db.SmallInt
    genres                  String[]        @db.Uuid        // массив uuid[] - ОТЛИЧНО ПОЛУЧАЕТСЯ
    type                    AnimeType       @default(OTHER)
    studio_id               String          @db.Uuid
    seasons_count           Int             @db.SmallInt
    episodes_count          Int             @db.SmallInt
    total_duration          Int             @db.Integer     // секунды
    next_episode            DateTime        @db.Time        // формат 4 апр. 03:30
    film_rating             FilmRating      @default(G)
    description             String          @db.Text
    preview_link            String          @db.Text
    status_description      String          @db.VarChar(30)
    release_status          ReleaseStatus   @default(OTHER)
    characters              String[]        @db.Uuid    // массив uuid[] - ОТЛИЧНО ПОЛУЧАЕТСЯ
    authors                 String[]        @db.Uuid    // массив uuid[] - ОТЛИЧНО ПОЛУЧАЕТСЯ

    @@map("anime")
}

enum FilmRating {
    G
    PG
    PG_13
    R
    R_17
    NC_17
    NC_21
}

enum ReleaseStatus {
    RELEASED
    PRE_RELEASE
    OTHER
}

enum AnimeType {
    TV_SERIAL
    SPECIAL
    OVA
    ONA
    OTHER
}

model Author {
    id             String   @id @default(uuid()) @db.Uuid
    author_name    String   @db.VarChar(50)
    bucket_id      String   @db.Uuid
    bio            String   @db.Text

    @@map("author")
}

model Character {
    id              String      @id @default(uuid()) @db.Uuid
    bucket_id       String      @db.Uuid
    character_name  String      @db.VarChar(50)
    importaice      Importance  @default(MAIN_HERO)
    description     String      @db.Text

    @@map("character")
}

enum Importance {
    MAIN_HERO
    MAJOR_HERO
    OTHER
}

model Studio {
    id              String   @id @default(uuid()) @db.Uuid
    studio_name     String   @db.VarChar(50)

    @@map("studio")
}

model Genre {
    id              String   @id @default(uuid()) @db.Uuid
    genre_name      String   @db.VarChar(50)

    @@map("genre")
}

model Translation {
    id          String  @id @default(uuid()) @db.Uuid
    language    String  @db.VarChar(20)
    translation String  @db.Text

    @@map("translation")
}
